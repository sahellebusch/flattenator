{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.34.4",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "flattenizer!",
  "docComment": "/**\n * A library for flattening and unflattening objects.\n *\n * @remarks\n *\n * Both exported functions will accept either undefined or null and return the same.\n *\n * @packageDocumentation\n */\n",
  "name": "flattenizer",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "flattenizer!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "flattenizer!Delimiter:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Delimiter = "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/flattenizer.d.ts",
          "releaseTag": "Public",
          "name": "Delimiter",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "flattenizer!flatten:var",
          "docComment": "/**\n * Flattens an object.\n *\n * @param unflattened - the object to flatten\n *\n * @param delimiter - the delimiter to be used when flattening the object. Defalts to '.'.\n *\n * @returns The flattened object, empty if provided object is undefined\n *\n * @example\n * ```\n * let unflattened = {\n *    name: 'Sean',\n *    city: 'Kansas City',\n *    favBreweries: [\n *        {\n *            name: 'Double Shift',\n *            favBeer: 'Sister Abbey'\n *        },\n *        {\n *           name: 'KC Bier Co',\n *            favBeer: 'Helles'\n *        }\n *    ]\n * };\n *\n * flatten(unflattened)\n * { name: 'Sean',\n *   city: 'Kansas City',\n *  'favBreweries.0.name': 'Double Shift',\n *  'favBreweries.0.favBeer': 'Sister Abbey',\n *  'favBreweries.1.name': 'KC Bier Co',\n *   'favBreweries.1.favBeer': 'Helles' }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "flatten: "
            },
            {
              "kind": "Content",
              "text": "<A extends "
            },
            {
              "kind": "Reference",
              "text": "IFlattened",
              "canonicalReference": "flattenizer!IFlattened:interface"
            },
            {
              "kind": "Content",
              "text": "<any>, B extends "
            },
            {
              "kind": "Reference",
              "text": "IUnflattened",
              "canonicalReference": "flattenizer!IUnflattened:interface"
            },
            {
              "kind": "Content",
              "text": "<any>>(unflattened: "
            },
            {
              "kind": "Reference",
              "text": "Nullable",
              "canonicalReference": "flattenizer!Nullable:type"
            },
            {
              "kind": "Content",
              "text": "<B>, delimiter?: "
            },
            {
              "kind": "Reference",
              "text": "Delimiter",
              "canonicalReference": "flattenizer!Delimiter:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Nullable",
              "canonicalReference": "flattenizer!Nullable:type"
            },
            {
              "kind": "Content",
              "text": "<A>"
            }
          ],
          "fileUrlPath": "dist/flattenizer.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "flatten",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "flattenizer!IFlattened:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFlattened<P> "
            }
          ],
          "fileUrlPath": "dist/flattenizer.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "P",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IFlattened",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "flattenizer!IFlattened:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "P"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "flattenizer!IUnflattened:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IUnflattened<P> "
            }
          ],
          "fileUrlPath": "dist/flattenizer.d.ts",
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "P",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IUnflattened",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "flattenizer!IUnflattened:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "P | P[] | "
                },
                {
                  "kind": "Reference",
                  "text": "IUnflattened",
                  "canonicalReference": "flattenizer!IUnflattened:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "flattenizer!Nullable:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Nullable<A> = "
            },
            {
              "kind": "Content",
              "text": "A | null | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/flattenizer.d.ts",
          "releaseTag": "Public",
          "name": "Nullable",
          "typeParameters": [
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "flattenizer!unflatten:var",
          "docComment": "/**\n * Unflattens an object with compressed keys.\n *\n * @remarks\n *\n * This function will not unflatten any properties on the __proto__ object property in order to prevent pollution.\n *\n * @param flattened - object to unflatten\n *\n * @param delimiter - the delimiter to be used when unflattening the object. Defaults to '.'.\n *\n * @returns The unflattened object, empty if provided object is undefined.\n *\n * @example\n * ```\n * let flattened = { name: 'Sean',\n *   city: 'Kansas City',\n *  'favBreweries.0.name': 'Double Shift',\n *  'favBreweries.0.favBeer': 'Sister Abbey',\n *  'favBreweries.1.name': 'KC Bier Co',\n *   'favBreweries.1.favBeer': 'Helles' }\n *\n * unflatten(flattened)\n *\n *  { name: 'Sean',\n *    city: 'Kansas City',\n *    favBreweries:\n *     [ { name: 'Double Shift', favBeer: 'Sister Abbey' },\n *       { name: 'KC Bier Co', favBeer: 'Helles' } ] }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "unflatten: "
            },
            {
              "kind": "Content",
              "text": "<A extends "
            },
            {
              "kind": "Reference",
              "text": "IFlattened",
              "canonicalReference": "flattenizer!IFlattened:interface"
            },
            {
              "kind": "Content",
              "text": "<any>, B extends "
            },
            {
              "kind": "Reference",
              "text": "IUnflattened",
              "canonicalReference": "flattenizer!IUnflattened:interface"
            },
            {
              "kind": "Content",
              "text": "<any>>(flattened: "
            },
            {
              "kind": "Reference",
              "text": "Nullable",
              "canonicalReference": "flattenizer!Nullable:type"
            },
            {
              "kind": "Content",
              "text": "<A>, delimiter?: "
            },
            {
              "kind": "Reference",
              "text": "Delimiter",
              "canonicalReference": "flattenizer!Delimiter:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Nullable",
              "canonicalReference": "flattenizer!Nullable:type"
            },
            {
              "kind": "Content",
              "text": "<B>"
            }
          ],
          "fileUrlPath": "dist/flattenizer.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "unflatten",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        }
      ]
    }
  ]
}
